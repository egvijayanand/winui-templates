Join me on Developer Thoughts (https://egvijayanand.in/), an exclusive blog for articles on .NET MAUI and Blazor.

What's new in ver. 4.3.0:
-------------------------
Templates updated to support .NET 10 Preview 7.

Introduced an option to use Nightly builds with WinUI Blazor projects for .NET MAUI components, featuring automatic configuration of package feeds.

-ni | --nightly - Default value is false

dotnet new winui-blazor -o NightlyApp -ni

v4.2.1:

Resolved an issue in the MVVM + RCL scenario where the artifacts in the ViewModels folder had not been moved to their proper location.

v4.2.0:

Templates updated to support .NET 10 Preview 6.

Introduced an option to abstract the Shared components as a separate .NET MAUI and/or Razor Class Library.

-mcl | --maui-class-library - Default value is false

.NET MAUI XAML can be included within this .NET MAUI-specific class library.

-rcl | --razor-class-library - Default value is false

This Razor Class Library allows code reuse with other projects such as ASP.NET Core.

Note: Use both options to segregate MAUI and Razor components into distinct libraries.

dotnet new winui-blazor -o MyApp -mcl

dotnet new winui-blazor -o SharedApp -rcl

dotnet new winui-blazor -o HybridApp -mcl -rcl

v4.1.0:

Templates updated to support .NET 10 Preview 4.

v4.0.0:

Support for creating WinUI projects on .NET 10 preview and .NET 9 stable.

For this, have introduced an additional option to the framework parameter - net10.0

Note: The default value for the framework parameter remains as net9.0, which means to create a project for .NET 10, an explicit value of net10.0 is to be passed.

dotnet new winui -o MyApp -f net10.0

By default, the package type is now set to Unpackaged.

WinUI Blazor project template is revamped to use Native Embedding process.

Note: It is not possible to use WinUI XAML and .NET MAUI XAML in the same project.

As an alternative solution, abstract .NET MAUI components as a class library and reference it in the WinUI project.

v3.5.0:

Frame-based navigation in the App project template.

The WindowsSdkPackageVersion property has been temporarily included to make use of the latest version of the MVVM toolkit.

v3.4.0:

1. Templates updated to support .NET 9 Preview 7 and the latest .NET 8 release.

2. Introduced an option to support the XML-based solution file (slnx) format.

This would be an explicit option since the SLNX feature is currently in the preview stage and is only supported on VS2022.

-slnx | --use-slnx - Default value is false

dotnet new winui -o MyApp -slnx

dotnet new winui-blazor -o HybridApp -slnx

dotnet new winuilib -o MyLib -slnx

v3.3.0:

Introduced using the NuGet CPM feature from within Visual Studio IDE.

Templates updated to support .NET 9 Preview 5 and the latest .NET 8 release.

Little housekeeping to make the templates even more reliable.

v3.2.0:

Templates updated to support .NET 9 Preview 4 and the latest .NET 8 release.

v3.1.0:

Introduced an option to support NuGet's Central Package Management (CPM) feature in the project templates.

-cpm | --central-pkg-mgmt - The default value is false.

Note: This can also be used in combination with other options.

dotnet new winui -o MyApp -cpm

dotnet new winui-blazor -o HybridApp -cpm

dotnet new winuilib -o MyLib -cpm

v3.0.0:

Templates updated for .NET 9 Preview 1.

For this, have introduced an additional option to the framework parameter - net9.0

Note: The default value for the framework parameter remains as net8.0, which means to create a project for .NET 9, an explicit value of net9.0 is to be passed.

dotnet new winui -n MyApp -f net9.0

dotnet new winui-blazor -n HybridApp -f net9.0

dotnet new winuilib -n MyLib -f net9.0

v2.2.0:

1. Templates updated for .NET MAUI stable version.

2. Auto-binding the project's RootNamespace as the namespace for newly created source files from item templates (Supported only on .NET 7 SDK or later).

3. Auto Suffix for the files created with the Page and Window item templates.

Ensure the project is restored before making use of the item templates.

dotnet new winui-page -n Order

dotnet new winui-window -n Home

v2.2.0-preview.4:

1. Templates updated to .NET 8 RC2

v2.2.0-preview.3:

1. Templates updated to .NET 8 RC1 changes

2. The default value for Framework parameter (--framework / -f) is now updated as net8.0

3. Explicit reference to .NET MAUI packages

4. Use of UseRidGraph node to indicate the change in RID behavior

https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/8.0/rid-graph

v2.2.0-preview.2:

A maintenance release that addresses solution file issue.

v2.2.0-preview.1:

Added a project template for using Blazor Hybrid on WinUI 3 project using the .NET MAUI Native Embedding

Windows-target of .NET MAUI is nothing but WinUI 3 project

dotnet new winui-blazor -n MyApp

For .NET 8 Preview:

dotnet new winui-blazor -n MyApp -f net8.0

v2.1.0:

1. MVVM is a delightful and development-friendly design pattern to work with. To support this, a new parameter has been introduced in the App project template:

-mvvm | --use-mvvm and its default value is false.

dotnet new winui -n MyApp -mvvm

2. Microsoft.WindowsAppSDK NuGet package version has been made dynamic to pull the latest stable version in the 1.x series.

v2.0.0:

Templates updated to support .NET 8 Previews.

Supported values for target framework parameter, can be specified with --framework / -f

net6.0
net7.0 (the default value)
net8.0

Examples:

dotnet new winui -f net8.0 -o MyApp

dotnet new winuilib -f net8.0 -o MyLib

v1.0.3:

Little housekeeping to make it more reliable.

v1.0.2:

Added Item Templates for WinUI 3 Page, UserControl, and Window.

v1.0.1:

For CLI build to succeed, included the EnableMsixTooling property to the library project template. 

v1.0.0:

Initial release of WinUI 3 App and Class Library Templates for CLI.
